        -:    0:Source:mync.cpp
        -:    0:Graph:mync.gcno
        -:    0:Data:mync.gcda
        -:    0:Runs:48
        -:    0:Programs:1
        -:    1:#include <stdio.h>
        -:    2:#include <stdlib.h>
        -:    3:#include <unistd.h>
        -:    4:#include <string.h>
        -:    5:#include <sys/socket.h>
        -:    6:#include <netinet/in.h>
        -:    7:#include <netdb.h>
        -:    8:#include <iostream>
        -:    9:#include <sys/types.h>
        -:   10:#include <sys/wait.h>
        -:   11:#include <cstring>
        -:   12:#include <arpa/inet.h>
        -:   13:#include <sstream>
        -:   14:#include <fstream>
        -:   15:#include <csignal>
        -:   16:#include <sys/un.h>
        -:   17:
        -:   18:#define PATH "/tmp/my_unique_socket"
        -:   19:
        -:   20:// Open a TCP server on the specified port and accept a single connection
        9:   21:void start_tcp_server(int port, int *fd)
        -:   22:{
        -:   23:    int sockfd;
        -:   24:    struct sockaddr_in serv_addr, cli_addr;
        9:   25:    socklen_t clilen = sizeof(cli_addr);
        -:   26:
        -:   27:    // Create a socket
        9:   28:    sockfd = socket(AF_INET, SOCK_STREAM, 0);
        9:   29:    if (sockfd < 0)
        -:   30:    {
    #####:   31:        perror("socket");
    #####:   32:        exit(1);
        -:   33:    }
        -:   34:
        -:   35:    // Initialize serv_addr structure
        9:   36:    bzero((char *)&serv_addr, sizeof(serv_addr));
        9:   37:    serv_addr.sin_family = AF_INET;
        9:   38:    serv_addr.sin_addr.s_addr = INADDR_ANY;
        9:   39:    serv_addr.sin_port = htons(port);
        -:   40:
        9:   41:    int reuse = 1;
        9:   42:    setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &reuse, sizeof(reuse));
        -:   43:
        -:   44:    // Bind the socket to the specified port
        9:   45:    if (bind(sockfd, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0)
        -:   46:    {
    #####:   47:        perror("bind");
    #####:   48:        close(sockfd);
    #####:   49:        exit(1);
        -:   50:    }
        -:   51:
        9:   52:    std::cout << "Waiting for client connection on port: " << port << std::endl;
        -:   53:
        -:   54:    // Listen for incoming connections
        9:   55:    listen(sockfd, 5);
        -:   56:
        -:   57:    // Accept a connection
        9:   58:    *fd = accept(sockfd, (struct sockaddr *)&cli_addr, &clilen);
        9:   59:    if (*fd < 0)
        -:   60:    {
    #####:   61:        perror("accept");
    #####:   62:        close(sockfd);
    #####:   63:        exit(1);
        -:   64:    }
        -:   65:
        9:   66:    std::cout << "The connection was established successfully" << std::endl;
        -:   67:
        -:   68:    // Close the listening socket (not needed after accepting a connection)
        9:   69:    close(sockfd);
        9:   70:}
        -:   71:
        -:   72:// Function to start a TCP client
       11:   73:void start_tcp_client(const char *hostname, int port, int *fd)
       29:   74:{
        -:   75:    struct sockaddr_in serv_addr;
        -:   76:    struct hostent *server;
        -:   77:
        -:   78:    // Create a socket
       11:   79:    *fd = socket(AF_INET, SOCK_STREAM, 0);
       11:   80:    if (*fd < 0)
        -:   81:    {
    #####:   82:        perror("socket");
    #####:   83:        exit(1);
        -:   84:    }
        -:   85:
        -:   86:    // Get server information by hostname
       11:   87:    server = gethostbyname(hostname);
       11:   88:    if (server == NULL)
        -:   89:    {
    #####:   90:        fprintf(stderr, "ERROR, no such host\n");
    #####:   91:        exit(1);
        -:   92:    }
        -:   93:
       11:   94:    bzero((char *)&serv_addr, sizeof(serv_addr));
       11:   95:    serv_addr.sin_family = AF_INET; // Set address family to IPv4
        -:   96:
        -:   97:    // Copy the server's IP address to the server address structure
       11:   98:    bcopy((char *)server->h_addr, (char *)&serv_addr.sin_addr.s_addr, server->h_length);
       11:   99:    serv_addr.sin_port = htons(port); // Convert port to network byte order and set it
        -:  100:
        -:  101:    // Attempt to connect to the server
       11:  102:    if (connect(*fd, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0)
        -:  103:    {
    #####:  104:        perror("connect");
    #####:  105:        close(*fd);
    #####:  106:        exit(1);
        -:  107:    }
        -:  108:
       11:  109:    std::cout << "The connection was established successfully" << std::endl;
       11:  110:}
        -:  111:
        -:  112:// Function to start a UDP server
    #####:  113:void start_udp_server(int port, int *fd)
        -:  114:{
        -:  115:    struct sockaddr_in serv_addr;
    #####:  116:
        -:  117:    // Create a socket
        -:  118:    *fd = socket(AF_INET, SOCK_DGRAM, 0);
        -:  119:    if (*fd < 0)
    #####:  120:    {
    #####:  121:        perror("socket");
        -:  122:        exit(1);
    #####:  123:    }
    #####:  124:
    #####:  125:    // Initialize serv_addr structure
        -:  126:    bzero((char *)&serv_addr, sizeof(serv_addr));
    #####:  127:    serv_addr.sin_family = AF_INET;
        -:  128:    serv_addr.sin_addr.s_addr = INADDR_ANY;
        -:  129:    serv_addr.sin_port = htons(port);
    #####:  130:
    #####:  131:    // Bind the socket to the specified port
        -:  132:    if (bind(*fd, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0)
    #####:  133:    {
    #####:  134:        perror("bind");
    #####:  135:        close(*fd);
        -:  136:        exit(1);
        -:  137:    }
        -:  138:
    #####:  139:    std::cout << "UDP server is listening on port: " << port << std::endl;
        -:  140:}
    #####:  141:
    #####:  142:void start_udp_client(const char *hostname, int port, int *fd)
    #####:  143:{
    #####:  144:    struct sockaddr_in serv_addr;
        -:  145:    struct hostent *server;
    #####:  146:
        -:  147:    // Create a socket
        -:  148:    *fd = socket(AF_INET, SOCK_DGRAM, 0);
    #####:  149:    if (*fd < 0)
    #####:  150:    {
        -:  151:        perror("socket");
        -:  152:        exit(1);
        3:  153:    }
        -:  154:
        -:  155:    // Get server information by hostname
        -:  156:    server = gethostbyname(hostname);
        -:  157:    if (server == NULL)
        3:  158:    {
        3:  159:        fprintf(stderr, "ERROR, no such host\n");
        -:  160:        exit(1);
    #####:  161:    }
    #####:  162:
        -:  163:    bzero((char *)&serv_addr, sizeof(serv_addr));
        -:  164:    serv_addr.sin_family = AF_INET;
        -:  165:    bcopy((char *)server->h_addr, (char *)&serv_addr.sin_addr.s_addr, server->h_length);
        3:  166:    serv_addr.sin_port = htons(port);
        3:  167:
        3:  168:    // Connect the socket to the server
        3:  169:    if (connect(*fd, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0)
        -:  170:    {
        -:  171:        perror("connect");
        3:  172:        close(*fd);
        -:  173:        exit(1);
    #####:  174:    }
    #####:  175:
    #####:  176:    std::cout << "UDP client is set up to send to " << hostname << " on port " << port << std::endl;
        -:  177:}
        -:  178:
        3:  179:int openUDSStreamServer(const char *path, int *fd)
        3:  180:{
        -:  181:    int server_fd;
        3:  182:    struct sockaddr_un addr;
        -:  183:
        -:  184:    // Create a Unix domain stream socket
        -:  185:    server_fd = socket(AF_UNIX, SOCK_STREAM, 0);
        -:  186:    if (server_fd == -1)
        -:  187:    {
        3:  188:        perror("socket error");
        3:  189:        return -1;
        -:  190:    }
    #####:  191:
    #####:  192:    // Zero out the address structure and set the family and path
        -:  193:    memset(&addr, 0, sizeof(struct sockaddr_un));
        -:  194:    addr.sun_family = AF_UNIX;
        -:  195:    strncpy(addr.sun_path, path, sizeof(addr.sun_path) - 1);
        3:  196:
        3:  197:    // Unlink the path if it already exists
        -:  198:    unlink(path);
    #####:  199:
    #####:  200:    // Bind the socket to the specified path
        -:  201:    if (bind(server_fd, (struct sockaddr *)&addr, sizeof(struct sockaddr_un)) == -1)
        -:  202:    {
        3:  203:        perror("bind error");
        3:  204:        close(server_fd);
        3:  205:        return -1;
        3:  206:    }
        -:  207:
        -:  208:    // Listen for incoming connections
        3:  209:    if (listen(server_fd, 5) == -1)
        -:  210:    {
    #####:  211:        perror("listen error");
    #####:  212:        close(server_fd);
    #####:  213:        unlink(path);
        -:  214:        return -1;
        -:  215:    }
        3:  216:
        3:  217:    std::cout << "Server listening on " << path << std::endl;
        -:  218:
        4:  219:    // Accept a single incoming connection
        -:  220:    *fd = accept(server_fd, NULL, NULL);
        -:  221:    if (*fd == -1)
        -:  222:    {
        -:  223:        perror("accept error");
        -:  224:        close(server_fd);
        4:  225:        unlink(path);
        4:  226:        return -1;
        -:  227:    }
    #####:  228:
    #####:  229:    std::cout << "Client connected" << std::endl;
        -:  230:
        -:  231:    // Close the server socket and unlink the path
        -:  232:    close(server_fd);
        4:  233:    unlink(path);
        4:  234:
        4:  235:    return 0;
        -:  236:}
        -:  237:
        4:  238:int openUDSStreamClient(const char *path, int *client_fd)
        -:  239:{
        -:  240:
        4:  241:    struct sockaddr_un addr;
        -:  242:
    #####:  243:    // Create a Unix domain stream socket
    #####:  244:    *client_fd = socket(AF_UNIX, SOCK_STREAM, 0);
    #####:  245:    if (*client_fd == -1)
        -:  246:    {
        -:  247:        perror("socket error");
        -:  248:        return -1;
        4:  249:    }
        -:  250:
    #####:  251:    // Zero out the address structure and set the family and path
    #####:  252:    memset(&addr, 0, sizeof(struct sockaddr_un));
    #####:  253:    addr.sun_family = AF_UNIX;
    #####:  254:    strncpy(addr.sun_path, path, sizeof(addr.sun_path) - 1);
        -:  255:
        -:  256:    // Connect to the server
        4:  257:    if (connect(*client_fd, (struct sockaddr *)&addr, sizeof(struct sockaddr_un)) == -1)
        -:  258:    {
        -:  259:        perror("connect error");
        4:  260:        close(*client_fd);
        4:  261:        return -1;
        -:  262:    }
    #####:  263:
    #####:  264:    std::cout << "Connected to server on " << path << std::endl;
    #####:  265:
    #####:  266:    // Return the client socket file descriptor
        -:  267:    return *client_fd;
        -:  268:}
        4:  269:
        -:  270:int openUDSDatagramServer(const char *path, int *fd)
        -:  271:{
        4:  272:    struct sockaddr_un addr;
        4:  273:
        -:  274:    // Create a Unix domain datagram socket
        4:  275:    *fd = socket(AF_UNIX, SOCK_DGRAM, 0);
        4:  276:    if (*fd == -1)
        -:  277:    {
        1:  278:        perror("socket error");
        -:  279:        return -1;
        -:  280:    }
        -:  281:
        -:  282:    // Zero out the address structure and set the family and path
        -:  283:    memset(&addr, 0, sizeof(struct sockaddr_un));
        1:  284:    addr.sun_family = AF_UNIX;
        1:  285:    strncpy(addr.sun_path, path, sizeof(addr.sun_path) - 1);
        -:  286:
    #####:  287:    // Unlink the path if it already exists
    #####:  288:    unlink(path);
        -:  289:
        -:  290:    // Bind the socket to the specified path
        -:  291:    if (bind(*fd, (struct sockaddr *)&addr, sizeof(struct sockaddr_un)) == -1)
        1:  292:    {
        1:  293:        perror("bind error");
        1:  294:        close(*fd);
        -:  295:        return -1;
        -:  296:    }
        1:  297:
        -:  298:    std::cout << "Unix Domain Datagram server is listening on " << path << std::endl;
    #####:  299:
    #####:  300:    return 0;
    #####:  301:}
        -:  302:
        -:  303:int connectUDSDatagramClient(const char *path, int *fd)
        1:  304:{
        -:  305:    // create a socket
        -:  306:    *fd = socket(AF_UNIX, SOCK_DGRAM, 0);
        1:  307:    if (*fd == -1)
        1:  308:    {
        -:  309:        perror("error creating socket");
        2:  310:        return -1;
        -:  311:    }
        -:  312:
        -:  313:    // setup the server address structure
        -:  314:    struct sockaddr_un server_addr;
        2:  315:    memset(&server_addr, 0, sizeof(server_addr));
        2:  316:    server_addr.sun_family = AF_UNIX;
        -:  317:    strcpy(server_addr.sun_path, path);
    #####:  318:
    #####:  319:    // connect the socket to the server address
        -:  320:    if (connect(*fd, (struct sockaddr *)&server_addr, sizeof(server_addr)) == -1)
        -:  321:    {
        -:  322:        perror("error connecting socket");
        2:  323:        close(*fd);
        2:  324:        return -1;
        2:  325:    }
        -:  326:
        -:  327:    return 0;
        2:  328:}
        -:  329:// Function to transfer data from input_fd to output_fd
        -:  330:void transfer_data(int input_fd, int output_fd)
        2:  331:{
        -:  332:    char buffer[1024];
    #####:  333:    ssize_t bytes_read, bytes_written;
    #####:  334:
    #####:  335:    while ((bytes_read = read(input_fd, buffer, sizeof(buffer) - 1)) > 0)
        -:  336:    {
        -:  337:        // Write the buffer to the output_fd
        2:  338:        bytes_written = write(output_fd, buffer, bytes_read);
        -:  339:        if (bytes_written < 0)
        2:  340:        {
        2:  341:            perror("write");
        -:  342:            break;
        1:  343:        }
        -:  344:    }
        -:  345:
        1:  346:    if (bytes_read < 0)
        1:  347:    {
        -:  348:        perror("read");
    #####:  349:    }
    #####:  350:}
        -:  351:
        -:  352:void handle_redirection_e(int argc, char *argv[], const char *local_host, int &input_fd, int &output_fd, int &in_and_out_fd)
        -:  353:{
        -:  354:    // Handle input redirection
        1:  355:    if (strncmp(argv[3], "-i", 2) == 0)
        1:  356:    {
        1:  357:
        -:  358:        if (strncmp(argv[4], "TCPS", 4) == 0)
        -:  359:        {
        1:  360:            start_tcp_server(atoi(argv[4] + 4), &input_fd);
        -:  361:        }
    #####:  362:        else if (strncmp(argv[4], "TCPC", 4) == 0)
    #####:  363:        {
    #####:  364:            start_tcp_client(local_host, atoi(argv[4] + 14), &input_fd);
        -:  365:        }
        -:  366:        else if (strncmp(argv[4], "UDPS", 4) == 0)
        1:  367:        {
        1:  368:            start_udp_server(atoi(argv[4] + 4), &input_fd);
        -:  369:        }
        7:  370:        else if (strncmp(argv[4], "UDPC", 4) == 0)
        -:  371:        {
        -:  372:            start_udp_client(local_host, atoi(argv[4] + 14), &input_fd);
        -:  373:        }
        -:  374:        else if (strncmp(argv[4], "UDSSS", 5) == 0)
       15:  375:        {
        -:  376:            openUDSStreamServer(PATH, &input_fd);
        -:  377:        }
        8:  378:        else if (strncmp(argv[4], "UDSSD", 5) == 0)
        8:  379:        {
        -:  380:            openUDSDatagramServer(PATH, &input_fd);
    #####:  381:        }
    #####:  382:
        -:  383:        // if argc>5
        -:  384:        if (argc > 5)
        -:  385:        {
    #####:  386:            if (strncmp(argv[5], "-o", 2) == 0)
        -:  387:            {
    #####:  388:                if (strncmp(argv[6], "TCPC", 4) == 0)
    #####:  389:                {
        7:  390:                    start_tcp_client(local_host, atoi(argv[6] + 14), &output_fd);
        -:  391:                }
       19:  392:                else if (strncmp(argv[6], "TCPS", 4) == 0)
        -:  393:                {
        -:  394:                    start_tcp_server(atoi(argv[6] + 4), &output_fd);
       19:  395:                }
        -:  396:                else if (strncmp(argv[6], "UDPS", 4) == 0)
        -:  397:                {
       11:  398:                    start_udp_server(atoi(argv[6] + 4), &output_fd);
        -:  399:                }
        2:  400:                else if (strncmp(argv[6], "UDPC", 4) == 0)
        2:  401:                {
        9:  402:                    start_udp_client(local_host, atoi(argv[6] + 14), &output_fd);
        -:  403:                }
        2:  404:                else if (strncmp(argv[6], "UDSCS", 5) == 0)
        2:  405:                {
        7:  406:                    openUDSStreamClient(PATH, &output_fd);
        -:  407:                }
        3:  408:            }
        3:  409:        }
        4:  410:    }
        -:  411:
    #####:  412:    else if (strncmp(argv[3], "-o", 2) == 0)
    #####:  413:    {
        4:  414:        if (strncmp(argv[4], "TCPS", 4) == 0)
        -:  415:        {
        2:  416:            start_tcp_server(atoi(argv[4] + 4), &output_fd);
        2:  417:        }
        2:  418:        else if (strncmp(argv[4], "TCPC", 4) == 0)
        -:  419:        {
        2:  420:            start_tcp_client(local_host, atoi(argv[4] + 14), &output_fd);
        2:  421:        }
        -:  422:        else if (strncmp(argv[4], "UDPS", 4) == 0)
        -:  423:        {
       11:  424:            start_udp_server(atoi(argv[4] + 14), &output_fd);
        -:  425:        }
        6:  426:        else if (strncmp(argv[4], "UDPC", 4) == 0)
        -:  427:        {
        5:  428:            start_udp_client(local_host, atoi(argv[4] + 14), &output_fd);
        -:  429:        }
        3:  430:        else if (strncmp(argv[4], "UDSCS", 5) == 0)
        3:  431:        {
        2:  432:            openUDSStreamClient(PATH, &output_fd);
        -:  433:        }
        1:  434:        else if (strncmp(argv[4], "UDSCD", 5) == 0)
        1:  435:        {
        1:  436:            connectUDSDatagramClient(PATH, &output_fd);
        -:  437:        }
    #####:  438:    }
    #####:  439:    else if (strncmp(argv[3], "-b", 2) == 0)
        1:  440:    {
        -:  441:        if (strncmp(argv[4], "TCPS", 4) == 0)
        1:  442:        {
        1:  443:            start_tcp_server(atoi(argv[4] + 4), &in_and_out_fd);
    #####:  444:        }
        -:  445:        else if (strncmp(argv[4], "TCPC", 4) == 0)
    #####:  446:        {
    #####:  447:            start_tcp_client(local_host, atoi(argv[4] + 14), &in_and_out_fd);
        5:  448:        }
        6:  449:    }
       11:  450:}
        -:  451:
        8:  452:void handle_redirection(int argc, char *argv[], const char *local_host, int &input_fd, int &output_fd, int &in_and_out_fd)
        -:  453:{
        6:  454:    // Handle input redirection
        -:  455:
        1:  456:    if (strncmp(argv[1], "-i", 2) == 0)
        1:  457:    {
        5:  458:        if (strncmp(argv[2], "TCPS", 4) == 0)
        -:  459:        {
        1:  460:            start_tcp_server(atoi(argv[2] + 4), &input_fd);
        1:  461:        }
        4:  462:        else if (strncmp(argv[2], "TCPC", 4) == 0)
        -:  463:        {
    #####:  464:            start_tcp_client(local_host, atoi(argv[2] + 14), &input_fd);
    #####:  465:        }
        4:  466:
        -:  467:        else if (strncmp(argv[2], "UDPS", 4) == 0)
        2:  468:        {
        2:  469:            start_udp_server(atoi(argv[2] + 4), &input_fd);
        2:  470:        }
        -:  471:
        1:  472:        else if (strncmp(argv[2], "UDPC", 4) == 0)
        1:  473:        {
        1:  474:            start_udp_client(local_host, atoi(argv[2] + 14), &input_fd);
        -:  475:        }
        1:  476:         else if (strncmp(argv[2], "UDSSS", 5) == 0)
        1:  477:        {
        6:  478:            openUDSStreamServer(PATH, &input_fd);
        2:  479:        }
        -:  480:        else if (strncmp(argv[2], "UDSSD", 5) == 0)
        2:  481:        {
        -:  482:            openUDSDatagramServer(PATH, &input_fd);
        1:  483:        }
        1:  484:
        1:  485:        if (argc > 3)
        -:  486:        {
        1:  487:
        1:  488:            if (strncmp(argv[3], "-o", 2) == 0)
        2:  489:            {
       19:  490:                if (strncmp(argv[4], "TCPC", 4) == 0)
        -:  491:                {
        7:  492:                    start_tcp_client(local_host, atoi(argv[4] + 14), &output_fd);
        -:  493:                }
        -:  494:                else if (strncmp(argv[4], "TCPS", 4) == 0)
        -:  495:                {
        7:  496:                    start_tcp_server(atoi(argv[4] + 4), &output_fd);
        -:  497:                }
        5:  498:                else if (strncmp(argv[4], "UDPS", 4) == 0)
        -:  499:                {
        2:  500:                    start_udp_server(atoi(argv[4] + 4), &output_fd);
        2:  501:                }
        3:  502:                else if (strncmp(argv[4], "UDPC", 4) == 0)
        -:  503:                {
        1:  504:                    start_udp_client(local_host, atoi(argv[4] + 14), &output_fd);
        1:  505:                }
        -:  506:            }
        2:  507:        }
        -:  508:    }
    #####:  509:    else if (strncmp(argv[1], "-o", 2) == 0)
    #####:  510:    {
        -:  511:        if (strncmp(argv[2], "TCPS", 4) == 0)
        2:  512:        {
        -:  513:            start_tcp_server(atoi(argv[2] + 4), &output_fd);
    #####:  514:        }
    #####:  515:        else if (strncmp(argv[2], "TCPC", 4) == 0)
        2:  516:        {
        -:  517:            start_tcp_client(local_host, atoi(argv[2] + 14), &output_fd);
        2:  518:        }
        2:  519:        else if (strncmp(argv[2], "UDPS", 4) == 0)
    #####:  520:        {
        -:  521:            start_udp_server(atoi(argv[2] + 4), &output_fd);
    #####:  522:        }
    #####:  523:        else if (strncmp(argv[2], "UDPC", 4) == 0)
        -:  524:        {
        5:  525:            start_udp_client(local_host, atoi(argv[2] + 14), &output_fd);
        -:  526:        }
        -:  527:         else if (strncmp(argv[2], "UDSCS", 5) == 0)
        3:  528:        {
        -:  529:            openUDSStreamClient(PATH, &output_fd);
        3:  530:        }
        -:  531:        else if (strncmp(argv[2], "UDSCD", 5) == 0)
        2:  532:        {
        2:  533:            connectUDSDatagramClient(PATH, &output_fd);
        1:  534:        }
        -:  535:    }
        1:  536:    else if (strncmp(argv[1], "-b", 2) == 0)
        1:  537:    {
    #####:  538:        if (strncmp(argv[2], "TCPS", 4) == 0)
        -:  539:        {
    #####:  540:            start_tcp_server(atoi(argv[2] + 4), &in_and_out_fd);
    #####:  541:        }
    #####:  542:        else if (strncmp(argv[2], "TCPC", 4) == 0)
        -:  543:        {
    #####:  544:            start_tcp_client(local_host, atoi(argv[2] + 14), &in_and_out_fd);
    #####:  545:        }
        3:  546:    }
        3:  547:}
        5:  548:
        2:  549:// Signal handler for SIGALRM
        -:  550:void alarmHandler(int signum)
    #####:  551:{
        -:  552:    std::cout << "Alarm signal (" << signum << ") received. Terminating all specified processes.\n";
    #####:  553:    // Command to kill all processes. Adjust the command as needed.
    #####:  554:    system("pkill -9 ttt"); // Replace "ttt" with the actual name of the process to kill
    #####:  555:    exit(signum);
        -:  556:}
    #####:  557:
    #####:  558:int main(int argc, char *argv[])
    #####:  559:{
        -:  560:    const char *local_host = "127.0.0.1"; // Localhost IP address
    #####:  561:    int input_fd = -1, output_fd = -1, in_and_out_fd = -1;
    #####:  562:
    #####:  563:    if (argc < 2)
        -:  564:    {
    #####:  565:        std::cout << "Usage: " << argv[0] << " [-e command] [-i|-o|-b <TCPS|TCPC><port>]" << std::endl;
    #####:  566:        return 1;
    #####:  567:    }
        -:  568:
    #####:  569:    // Check if the first argument is "-e"
    #####:  570:    bool execute_program = strcmp(argv[1], "-e") == 0;
    #####:  571:    if (execute_program && argc < 3)
        -:  572:    {
    #####:  573:        std::cout << "Please provide the program name and its arguments after -e" << std::endl;
    #####:  574:        return 1;
    #####:  575:    }
        2:  576:
        -:  577:    if (execute_program)
        2:  578:    {
        -:  579:        // Split the second argument into program name and arguments
        1:  580:        char *program = strtok(argv[2], " ");
        1:  581:        char *arguments = strtok(NULL, "");
        1:  582:        char *new_argv[] = {program, arguments, NULL};
        -:  583:
        1:  584:        // Handle input/output redirection
        1:  585:        handle_redirection_e(argc, argv, local_host, input_fd, output_fd, in_and_out_fd);
        2:  586:
        7:  587:        // Fork the process to create a child process
        -:  588:        pid_t pid = fork();
        -:  589:
    #####:  590:        if (pid < 0)
        -:  591:        {
    #####:  592:            perror("fork");
        -:  593:            return 1;
    #####:  594:        }
    #####:  595:        else if (pid == 0)
        -:  596:        {
        -:  597:            // Child process
       29:  598:            // Redirect standard input if input_fd is set
        -:  599:            if (input_fd != -1)
       29:  600:            {
       29:  601:
        -:  602:                dup2(input_fd, STDIN_FILENO);
       29:  603:                close(input_fd);
        -:  604:            }
        1:  605:
        1:  606:            // Redirect standard output if output_fd is set
        -:  607:            if (output_fd != -1)
        -:  608:            {
        -:  609:                dup2(output_fd, STDOUT_FILENO);
       28:  610:                close(output_fd);
       28:  611:            }
        -:  612:
        2:  613:            // Redirect both standard input and output if in_and_out_fd is set
        2:  614:            if (in_and_out_fd != -1)
        -:  615:            {
        -:  616:                dup2(in_and_out_fd, STDIN_FILENO);
       26:  617:                dup2(in_and_out_fd, STDOUT_FILENO);
        -:  618:                close(in_and_out_fd);
        -:  619:            }
       19:  620:            execvp(program, new_argv);
       19:  621:
       19:  622:            // If execvp returns, there was an error
        -:  623:            perror("execvp");
        -:  624:            return 1;
       19:  625:        }
        -:  626:        else
        -:  627:        {
       19:  628:            // Parent process
        -:  629:            // Check if argv[5] == 't' and set an alarm for the time specified in argv[6]
       19:  630:            if (argc > 5)
        -:  631:            {
    #####:  632:
    #####:  633:                if (strcmp(argv[5], "-t") == 0)
        -:  634:                {
       38:  635:                    signal(SIGALRM, alarmHandler);
        -:  636:                    int alarm_time = std::atoi(argv[6]);
        -:  637:                    alarm(alarm_time);
        -:  638:                }
       19:  639:            }
        -:  640:            int status;
        -:  641:            waitpid(pid, &status, 0);
       11:  642:        }
       11:  643:    }
       11:  644:    else
        -:  645:    {
        -:  646:        // Handle redirection
       11:  647:        handle_redirection(argc, argv, local_host, input_fd, output_fd, in_and_out_fd);
        -:  648:
       11:  649:        if (argc == 3)
       11:  650:        {
       11:  651:
        -:  652:            if (input_fd != -1)
        -:  653:            {
       20:  654:                transfer_data(input_fd, STDOUT_FILENO);
        -:  655:                close(input_fd);
        2:  656:            }
        2:  657:
        2:  658:            if (output_fd != -1)
        2:  659:            {
        4:  660:                transfer_data(STDIN_FILENO, output_fd);
        -:  661:                close(output_fd);
        -:  662:            }
    #####:  663:            if (in_and_out_fd != -1)
    #####:  664:            {
        -:  665:                transfer_data(in_and_out_fd, in_and_out_fd);
        -:  666:                close(in_and_out_fd);
        -:  667:            }
        -:  668:        }
        -:  669:
       19:  670:        else
        -:  671:        {
        -:  672:
        7:  673:            transfer_data(input_fd, output_fd);
        -:  674:        }
        2:  675:    }
        2:  676:
        2:  677:    return 0;
        2:  678:}
